Metadata-Version: 2.0
Name: translate
Version: 3.5.0
Summary: This is a simple, yet powerful command line translator with google translate behind it. You can also use it as a Python module in your code.
Home-page: https://github.com/terryyin/google-translate-python
Author: Terry Yin
Author-email: terry.yinze@gmail.com
License: MIT
Description-Content-Type: UNKNOWN
Keywords: translate translation command line
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: End Users/Desktop
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python
Classifier: Topic :: Education
Requires-Dist: click
Requires-Dist: lxml
Requires-Dist: pre-commit
Requires-Dist: requests
Requires-Dist: tox


========================
Translate Tool in Python
========================

|PyPI latest| |PyPI Version| |PyPI License| |Docs| |Travis Build Status|


Translate is a simple but powerful translation tool written in python with with support for
multiple translation providers. By now we are integrated with Microsoft Translation API and
Translated MyMemory API


Why Should I Use This?
----------------------

The biggest reason to use translate is make translations in a simple way without the need of much
effort and can be used as a translation tool like command line


Installation
------------

.. code-block:: bash

   $ pip install translate

Or, you can download the source and

.. code-block:: bash

   $ python setup.py install

Add sudo in the beginning if you met problem.


Features
--------

- Translate your outputs in real time
- Do translation in your terminal using command line

Usage
-----

In your command-line:

.. code-block:: bash

   $ translate-cli -t zh "This is a pen."

   Translation: 这是一支笔
   -------------------------
   Translated by: MyMemory

Or

.. code-block:: bash

   $ translate-cli -t zh "This is a pen." -o
   这是一支笔

Options
~~~~~~~

.. code-block:: bash

    $ translate-cli --help
    Usage: __main__.py [OPTIONS] TEXT...

      Python command line tool to make on line translations

      Example:

           $ translate-cli -t zh the book is on the table
           碗是在桌子上。

      Available languages:

           https://en.wikipedia.org/wiki/ISO_639-1
           Examples: (e.g. en, ja, ko, pt, zh, zh-TW, ...)

    Options:
      --version                 Show the version and exit.
      --generate-config-file    Generated the config file using a Wizard and exit.
      -f, --from TEXT           Sets the language of the text being translated.
                                The default value is 'autodetect'.
      -t, --to TEXT             Sets the language you want to translate.
      -p, --provider TEXT       Set the provider you want to use. The default
                                value is 'mymemory'.
      --secret_access_key TEXT  Set the secret access key used to get provider
                                oAuth token.
      -o, --output_only         Set to display the translation only.
      --help                    Show this message and exit.


Change Default Languages
~~~~~~~~~~~~~~~~~~~~~~~~

In ~/.python-translate.cfg:

.. code-block:: bash

   [DEFAULT]
   from_lang = autodetect
   to_lang = de
   provider = mymemory
   secret_access_key =

The cfg is not for using as a Python module.

or run the command line and follow the steps:

.. code-block:: bash

    $ translate-cli --generate-config-file
    Translate from [autodetect]:
    Translate to: <language you want to translate>
    Provider [mymemory]:
    Secret Access Key []:


Use As A Python Module
----------------------

.. code-block:: python

   In [1]: from translate import Translator
   In [2]: translator= Translator(to_lang="zh")
   In [3]: translation = translator.translate("This is a pen.")
   Out [3]: 这是一支笔

The result is in translation, and it’s usually a unicode string.


Use a different translation provider
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    In [1]: from translate import Translator
    In [2]: to_lang = 'zh'
    In [3]: secret = '<your secret from Microsoft>'
    In [4]: translator = Translator(provider='microsoft', to_lang=to_lang, secret_access_key=secret)
    In [5]: translator.translate('the book is on the table')
    Out [5]: '碗是在桌子上。'


Documentation
-------------

Check out the latest ``translate`` documentation at `Read the Docs <http://translate-python.readthedocs.io/en/latest/>`_


Contributing
------------

Please send pull requests, very much appriciated.


1. Fork the `repository <https://github.com/terryyin/translate-python>`_ on GitHub.
2. Make a branch off of master and commit your changes to it.
3. Install requirements. ``pip install -r requirements-dev.txt``
4. Install pre-commit. ``pre-commit install``
5. Run the tests with ``py.test -vv -s``
6. Create a Pull Request with your contribution



.. |Docs| image:: https://readthedocs.org/projects/translate-python/badge/?version=latest
   :target: http://translate-python.readthedocs.org/en/latest/?badge=latest
.. |Travis Build Status| image:: https://api.travis-ci.org/terryyin/translate-python.png?branch=master
   :target: https://travis-ci.org/terryyin/translate-python
.. |PyPI Version| image:: https://img.shields.io/pypi/pyversions/translate.svg?maxAge=2592000
   :target: https://pypi.python.org/pypi/translate
.. |PyPI License| image:: https://img.shields.io/pypi/l/translate.svg?maxAge=2592000
   :target: https://pypi.python.org/pypi/translate
.. |PyPI latest| image:: https://img.shields.io/pypi/v/translate.svg?maxAge=2592000
   :target: https://pypi.python.org/pypi/translate



Changelog
---------

3.5.0
-----

* Add sphinx documentation
* Update readme.

3.4.1
-----

* Makefile: Add a make release command
* Add twine to dev requirements.

3.4.0
-----

* Refactor: Create a folder to add all providers instead to let in a single file
* Add Microsoft provider
* Add more documentation to all providers (Translated-MyMemory and Microsoft Translator)
* Add arguments to change the default provider using translate-cli


3.3.0
-----

* Refactor translate-cli (command line interface) Using Click library instead of ArgParser
* Unify translate-cli and main to avoid duplicate code
* Add documentation to be used on helper commands on translate-cli
* Remove unnecessary code
* Refactor setup to complete information in the PKG-INFO used by PyPI


3.2.1
-----

* Change the license from "BEER-WARE" to MIT

3.2.0
-----

* Add multiple providers suport

3.1.0
-----

* Apply Solid Principles
* Organize Project
* Add pre-commit, pytest
* Add new Make file
* Add new test cases

3.0.0
-----

* General Refactor
* Remove urllib to use requests
* Refactor methods names removing google from then
* Apply PEP8
* Change contructor to keep it the code simple

2.0.0 (2017-11-08)
------------------

* initial release using changes file


